(
(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  
  (execute-kbd-macro (kbd "C-g C-/ M-2")) 
  (should (looking-back "finally"))

  (kill-buffer))


)